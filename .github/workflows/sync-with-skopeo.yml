name: Sync image to Docker Hub (skopeo)

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        default: 'dev'
        required: false
  release:
    types:
      - published

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 设置 Docker tag，根据触发来源自动选择
      - name: Set Docker tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG=${GITHUB_EVENT_RELEASE_TAG}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.event.inputs.dockerImageTag }}" >> $GITHUB_ENV
          fi
        env:
          GITHUB_EVENT_RELEASE_TAG: ${{ github.event.release.tag_name }}

      # 登录 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 使用 skopeo 将远端镜像复制到本地 docker daemon
      - name: Copy image into local docker daemon with skopeo
        env:
          SRC: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ce:${{ env.TAG }}
          DEST_DAEMON: ${{ secrets.DOCKERHUB_USERNAME }}/cordys-crm:${{ env.TAG }}
          SRC_USER: ${{ secrets.FIT2CLOUD_REGISTRY_USERNAME }}
          SRC_PASSWORD: ${{ secrets.FIT2CLOUD_REGISTRY_PASSWORD }}
          SKOPEO_IMAGE: quay.io/skopeo/stable:v1.15.0
        run: |
          set -e
          echo "skopeo: copying ${SRC} -> docker-daemon:${DEST_DAEMON}"
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            --entrypoint skopeo \
            ${SKOPEO_IMAGE} \
            copy \
            --src-creds "${SRC_USER}:${SRC_PASSWORD}" \
            docker://${SRC} docker-daemon:${DEST_DAEMON}

      # 在本地打 latest 并 push 两个 tag 到 Docker Hub
      - name: Tag as latest and push both tags
        env:
          REPO: ${{ secrets.DOCKERHUB_USERNAME }}/cordys-crm
        run: |
          set -e
          IMAGE_TAG="${REPO}:${TAG}"
          IMAGE_LATEST="${REPO}:latest"

          echo "Tag present in local daemon: ${IMAGE_TAG}"
          echo "Tagging ${IMAGE_TAG} -> ${IMAGE_LATEST}"
          docker tag "${IMAGE_TAG}" "${IMAGE_LATEST}"

          echo "Pushing ${IMAGE_TAG}"
          docker push "${IMAGE_TAG}"

          echo "Pushing ${IMAGE_LATEST}"
          docker push "${IMAGE_LATEST}"

          echo "Done."
