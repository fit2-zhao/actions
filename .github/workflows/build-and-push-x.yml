name: build-and-push-ce-ee

run-name: 构建并推送 CE & EE 镜像 ${{ github.event.inputs.dockerImageTag }}

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        required: true
        default: 'dev'
      architecture:
        description: 'Target Architecture'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64

env:
  REGISTRY_HOST: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}
  REGISTRY_USER: ${{ secrets.FIT2CLOUD_REGISTRY_USERNAME }}
  REGISTRY_PWD: ${{ secrets.FIT2CLOUD_REGISTRY_PASSWORD }}
  TAG: ${{ github.event.inputs.dockerImageTag }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CE repository
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven repo
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and install CE artifacts
        run: |
          ./mvnw clean install -DskipTests

      - name: Checkout XPack repository
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm-xpack
          token: ${{ secrets.GH_TOKEN }}

      - name: Build XPack artifact
        run: |
          ./mvnw clean package -DskipTests
          echo "XPACK_JAR=$(ls target/*.jar | head -1)" >> $GITHUB_ENV

      - name: Set up QEMU & Buildx
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PWD }}

      - name: Build CE image locally
        run: |
          docker buildx build \
            --platform ${{ github.event.inputs.architecture }} \
            --tag ${{ env.REGISTRY_HOST }}/cordys-crm-ce:${{ env.TAG }} \
            --load \
            -f installer/Dockerfile .

      - name: Build EE image locally
        run: |
          docker buildx build \
            --platform ${{ github.event.inputs.architecture }} \
            --tag ${{ env.REGISTRY_HOST }}/cordys-crm-ee:${{ env.TAG }} \
            --load \
            - <<EOF
          FROM ${{ env.REGISTRY_HOST }}/cordys-crm-ce:${{ env.TAG }}
          COPY ${{ env.XPACK_JAR }} /app/lib/cordys-crm-xpack.jar
  EOF

- name: Push CE and EE images
  run: |
    # 推送 CE
    docker push ${{ env.REGISTRY_HOST }}/cordys-crm-ce:${{ env.TAG }}
    # 推送 EE
    docker push ${{ env.REGISTRY_HOST }}/cordys-crm-ee:${{ env.TAG }}
    # 如果非 dev，则也更新 latest tag
    if [[ "${{ env.TAG }}" != "dev" ]]; then
      docker tag ${{ env.REGISTRY_HOST }}/cordys-crm-ce:${{ env.TAG }} ${{ env.REGISTRY_HOST }}/cordys-crm-ce:latest
      docker push ${{ env.REGISTRY_HOST }}/cordys-crm-ce:latest
    fi

- name: Create or recreate Git tag
  if: github.event.inputs.dockerImageTag != 'dev'
  run: |
    git config --global user.name 'fit2-zhao'
    git config --global user.email 'yong.zhao@fit2cloud.com'
    TAG=${{ env.TAG }}
    git fetch --prune --tags
    if git ls-remote --tags origin refs/tags/$TAG | grep -q $TAG || git tag -l $TAG | grep -q $TAG; then
      git tag -d $TAG || true
      git push --delete origin $TAG || true
      sleep 2
      git fetch --prune --tags
    fi
    git tag -a $TAG -m "Release $TAG"
    git push origin $TAG
