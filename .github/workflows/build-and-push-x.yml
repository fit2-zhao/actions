name: Build and Push CE & EE Images

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        required: true
        default: 'dev'
      architecture:
        description: 'Target Architecture'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64
          - linux/amd64,linux/arm64
      # 新增分支参数
      csBranch:
        description: 'CE & EE Repository Branch'
        required: true
        default: 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}
      CE_IMAGE: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ce
      EE_IMAGE: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ee
      TAG: ${{ github.event.inputs.dockerImageTag }}
      PLATFORMS: ${{ github.event.inputs.architecture }}

    steps:
      # 0. Checkout CE and EE early so cache patterns work
      - uses: actions/checkout@v3
        name: Checkout CI repository
        with:
          fetch-depth: 0

      # 1. 设置 Java 21
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 2. 手动缓存 Maven 本地仓库
      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('cordys-crm/pom.xml', 'cordys-crm-xpack/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Build & install CE
      - name: Checkout CE
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.event.inputs.csBranch }}  # 指定CE分支
          path: cordys-crm

      - name: Build & Install CE (exclude frontend)
        working-directory: cordys-crm
        run: |
          ./mvnw install -N
          ./mvnw clean package -DskipTests -pl "!frontend" -am -B

      # 4. Checkout & build EE
      - name: Checkout EE (xpack)
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm-xpack
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.event.inputs.csBranch }}  # 指定EE分支
          path: cordys-crm-xpack

      - name: Build EE JAR
        working-directory: cordys-crm-xpack
        run: |
          ./mvnw clean package -DskipTests -B

      # 5. Setup QEMU + Buildx + Login
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.FIT2CLOUD_REGISTRY_USERNAME }}
          password: ${{ secrets.FIT2CLOUD_REGISTRY_PASSWORD }}

      # 6. Build & push CE image
      - name: Build & Push CE Image
        working-directory: cordys-crm
        run: |
          if [[ "${TAG}" == "dev" ]]; then
            CE_TAGS="--tag ${CE_IMAGE}:${TAG}"
          else
            CE_TAGS="--tag ${CE_IMAGE}:${TAG} --tag ${CE_IMAGE}:latest"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          docker buildx build \
            --platform ${PLATFORMS} \
            ${CE_TAGS} \
            --build-arg CRM_VERSION=${TAG}-${SHORT_SHA} \
            --push \
            -f installer/Dockerfile .

      - name: Create or Re-create CE Tag
        if: success()
        run: |
          git config --global user.name 'fit2-zhao'
          git config --global user.email 'yong.zhao@fit2cloud.com'

          # 判断是否为dev标签，如果是则跳过打tag操作
          if [[ "${{ github.event.inputs.dockerImageTag }}" != "dev" ]]; then
            # 获取远程标签信息
            git fetch --prune --tags
            
            # 检查标签是否存在（本地或远程）
            if git ls-remote --tags origin refs/tags/${{ github.event.inputs.dockerImageTag }} | grep -q "${{ github.event.inputs.dockerImageTag }}" || git tag -l "${{ github.event.inputs.dockerImageTag }}" | grep -q "${{ github.event.inputs.dockerImageTag }}"; then
              echo "标签 ${{ github.event.inputs.dockerImageTag }} 已存在，正在删除..."
            
              # 删除本地标签（如果存在）
              git tag -d ${{ github.event.inputs.dockerImageTag }} || true
            
              # 删除远程标签并确认结果
              git push --delete origin ${{ github.event.inputs.dockerImageTag }} || echo "远程标签可能不存在或已被删除"
            
              # 确认标签已被删除
              sleep 2
              git fetch --prune --tags
            fi
            
            # 创建和推送新标签
            git tag -a ${{ github.event.inputs.dockerImageTag }} -m "Release ${{ github.event.inputs.dockerImageTag }}"
            git push origin ${{ github.event.inputs.dockerImageTag }}
          fi

      # 7. Build & push EE image
      - name: Build & Push EE Image
        run: |
          JAR=$(ls cordys-crm-xpack/target/*.jar | head -n1)
          docker pull ${CE_IMAGE}:${TAG}
          docker create --name temp-ce ${CE_IMAGE}:${TAG}
          docker cp "$JAR" temp-ce:/app/lib/cordys-crm-xpack.jar
          docker commit temp-ce ${EE_IMAGE}:${TAG}
          docker push ${EE_IMAGE}:${TAG}
          docker rm temp-ce

        # 创建或更新标签
      - name: Create or Re-create EE Tag
        if: success()
        run: |
          git config --global user.name 'fit2-zhao'
          git config --global user.email 'yong.zhao@fit2cloud.com'
          
          # 判断是否为dev标签，如果是则跳过打tag操作
          if [[ "${{ github.event.inputs.dockerImageTag }}" == "dev" ]]; then
            echo "当前为dev标签，跳过打tag操作"
            exit 0
          fi
          
          # 获取远程标签信息
          git fetch --prune --tags
          
          # 检查标签是否存在（本地或远程）
          if git ls-remote --tags origin refs/tags/${{ github.event.inputs.dockerImageTag }} | grep -q "${{ github.event.inputs.dockerImageTag }}" || git tag -l "${{ github.event.inputs.dockerImageTag }}" | grep -q "${{ github.event.inputs.dockerImageTag }}"; then
            echo "标签 ${{ github.event.inputs.dockerImageTag }} 已存在，正在删除..."
          
            # 删除本地标签（如果存在）
            git tag -d ${{ github.event.inputs.dockerImageTag }} || true
          
            # 删除远程标签并确认结果
            git push --delete origin ${{ github.event.inputs.dockerImageTag }} || echo "远程标签可能不存在或已被删除"
          
            # 确认标签已被删除
            sleep 2
            git fetch --prune --tags
          fi
          
          # 创建和推送新标签
          git tag -a ${{ github.event.inputs.dockerImageTag }} -m "Release ${{ github.event.inputs.dockerImageTag }}"
          git push origin ${{ github.event.inputs.dockerImageTag }}