name: Build and Push CE & EE Images

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        required: true
        default: 'dev'
      architecture:
        description: 'Target Architecture'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64
          - linux/amd64,linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}
      CE_IMAGE: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ce
      EE_IMAGE: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ee
      TAG: ${{ github.event.inputs.dockerImageTag }}
      PLATFORMS: ${{ github.event.inputs.architecture }}

    steps:
      # 0. Checkout CE and EE early so cache patterns work
      - uses: actions/checkout@v3
        name: Checkout all code
        with:
          # 这里没有指定 path，复制两个 checkout 可选用路径方式
          fetch-depth: 0

      # 1. 设置 Java 21
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 2. 手动缓存 Maven 本地仓库
      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('cordys-crm/pom.xml', 'cordys-crm-xpack/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Build & install CE
      - name: Checkout CE
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm
          token: ${{ secrets.GH_TOKEN }}
          path: cordys-crm

      - name: Build & Install CE (exclude frontend)
        working-directory: cordys-crm
        run: |
          ./mvnw install -N
          ./mvnw clean package -DskipTests -pl "!frontend" -am -B

      # 4. Checkout & build EE
      - name: Checkout EE (xpack)
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm-xpack
          token: ${{ secrets.GH_TOKEN }}
          path: cordys-crm-xpack

      - name: Build EE JAR
        working-directory: cordys-crm-xpack
        run: |
          ./mvnw clean package -DskipTests -B

      # 5. Setup QEMU + Buildx + Login
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.FIT2CLOUD_REGISTRY_USERNAME }}
          password: ${{ secrets.FIT2CLOUD_REGISTRY_PASSWORD }}

      # 6. Build & push CE image
      - name: Build & Push CE Image
        working-directory: cordys-crm
        run: |
          if [[ "${TAG}" == "dev" ]]; then
            CE_TAGS="--tag ${CE_IMAGE}:${TAG}"
          else
            CE_TAGS="--tag ${CE_IMAGE}:${TAG} --tag ${CE_IMAGE}:latest"
          fi
          docker buildx build \
            --platform ${PLATFORMS} \
            ${CE_TAGS} \
            --build-arg CRM_VERSION=${TAG}-$(git -C cordys-crm rev-parse --short HEAD) \
            --push \
            -f installer/Dockerfile .

      # 7. Build & push EE image
      - name: Build & Push EE Image
        run: |
          JAR=$(ls cordys-crm-xpack/target/*.jar | head -n1)
          docker pull ${CE_IMAGE}:${TAG}
          docker create --name temp-ce ${CE_IMAGE}:${TAG}
          docker cp "$JAR" temp-ce:/app/lib/cordys-crm-xpack.jar
          docker commit temp-ce ${EE_IMAGE}:${TAG}
          docker push ${EE_IMAGE}:${TAG}
          docker rm temp-ce

      # 8. Recreate Git tag if needed
      - name: Recreate Git Tag
        if: success() && github.event.inputs.dockerImageTag != 'dev'
        run: |
          git config --global user.name 'fit2-zhao'
          git config --global user.email 'yong.zhao@fit2cloud.com'
          git fetch --prune --tags
          if git tag -l "${TAG}"; then
            git tag -d "${TAG}"
            git push --delete origin "${TAG}"
          fi
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"
