name: Build and Update Docker Image with JAR

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        required: true
        default: 'v1.0.0-dev'
      architecture:
        description: 'Target Architecture'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64
          - linux/amd64,linux/arm64

jobs:
  build-and-update:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: 设置 Java 环境（根据工程所需的版本）
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: 缓存 Maven 依赖（可选，提升速度）
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: 编译工程 JAR 包
      - name: Build JAR
        run: |
          mvn clean package -DskipTests

      # Step 5: 获取生成的 JAR 文件名
      - name: Get JAR file version
        run: |
          JAR_FILE=$(ls target/*.jar | head -n 1)
          JAR_VERSION=$(basename $JAR_FILE | sed 's/.*-\([0-9][^/]*\)\.jar/\1/')
          echo "JAR_VERSION=${JAR_VERSION}" >> $GITHUB_ENV
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      # Step 6: 登录 Docker Registry（私有镜像需要）
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: 拉取基础镜像
      - name: Pull Docker Image
        run: |
          docker pull <your-docker-registry>/<your-docker-image>:<tag>

      # Step 8: 创建一个临时容器
      - name: Create a container from the image
        run: |
          docker create --name temp-container <your-docker-registry>/<your-docker-image>:<tag>

      # Step 9: 将编译好的 JAR 文件复制到容器中
      - name: Copy JAR to container
        run: |
          docker cp ${{ env.JAR_FILE }} temp-container:/cordys-crm-xpack/lib/cordys-crm-xpack-${{ env.JAR_VERSION }}.jar

      # Step 10: 提交容器为新的镜像
      - name: Commit the updated container to a new image
        run: |
          docker commit temp-container <your-docker-registry>/<your-docker-image>:${{ github.event.inputs.dockerImageTag }}

      # Step 11: 推送新的镜像到指定位置
      - name: Push updated Docker Image
        run: |
          docker push <your-docker-registry>/<your-docker-image>:${{ github.event.inputs.dockerImageTag }}

      # Step 12: 清理临时容器
      - name: Remove temporary container
        run: |
          docker rm temp-container
